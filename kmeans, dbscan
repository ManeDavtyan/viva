import pandas as pd
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import roc_curve, auc, accuracy_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# Create a DataFrame
data = {'HttpHost': ['138975r3', 'khcvb.com', '1028etbnkdcnwhvcd']}
df = pd.DataFrame(data)

# Encode categorical variables
le = LabelEncoder()
df['HttpHost'] = le.fit_transform(df['HttpHost'])

# Apply KMeans clustering on the entire dataset
kmeans = KMeans(n_clusters=2, random_state=42)
df['kmeans_cluster'] = kmeans.fit_predict(df[['HttpHost']])

# Apply DBSCAN clustering on the entire dataset
dbscan = DBSCAN(eps=0.5, min_samples=5)
df['dbscan_cluster'] = dbscan.fit_predict(df[['HttpHost']])

# Split the data into training and testing sets
X_train, X_test = train_test_split(df, test_size=0.2, random_state=42)

# Evaluate KMeans clustering
kmeans_accuracy = accuracy_score(X_test['kmeans_cluster'], kmeans.predict(X_test[['HttpHost']]))

# Evaluate DBSCAN clustering
dbscan_accuracy = accuracy_score(X_test['dbscan_cluster'], dbscan.fit_predict(X_test[['HttpHost']]))

# Print accuracy scores
print("KMeans Accuracy:", kmeans_accuracy)
print("DBSCAN Accuracy:", dbscan_accuracy)

# ROC curve and AUC for KMeans
fpr_kmeans, tpr_kmeans, _ = roc_curve(X_test['kmeans_cluster'], kmeans.predict(X_test[['HttpHost']]))
roc_auc_kmeans = auc(fpr_kmeans, tpr_kmeans)

# ROC curve and AUC for DBSCAN
fpr_dbscan, tpr_dbscan, _ = roc_curve(X_test['dbscan_cluster'], dbscan.fit_predict(X_test[['HttpHost']]))
roc_auc_dbscan = auc(fpr_dbscan, tpr_dbscan)

# Plot ROC curves
plt.figure(figsize=(8, 8))
plt.plot(fpr_kmeans, tpr_kmeans, color='darkorange', lw=2, label=f'KMeans ROC curve (AUC = {roc_auc_kmeans:.2f})')
plt.plot(fpr_dbscan, tpr_dbscan, color='darkgreen', lw=2, label=f'DBSCAN ROC curve (AUC = {roc_auc_dbscan:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curves for KMeans and DBSCAN')
plt.legend(loc='lower right')
plt.show()










import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

# Create a DataFrame
data = {'HttpHost': ['138975r3', 'khcvb.com', '1028etbnkdcnwhvcd']}
df = pd.DataFrame(data)

# Encode categorical variables
le = LabelEncoder()
df['HttpHost'] = le.fit_transform(df['HttpHost'])

# Apply KMeans clustering on the entire dataset with 10 clusters
kmeans = KMeans(n_clusters=10, random_state=42)
df['cluster'] = kmeans.fit_predict(df[['HttpHost']])

# Visualize the clusters
plt.scatter(df['HttpHost'], [0] * len(df), c=df['cluster'], cmap='viridis', marker='o', s=100)
plt.title('Visualization of Clusters')
plt.xlabel('HttpHost')
plt.show()

