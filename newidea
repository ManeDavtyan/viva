import pandas as pd
import re
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Assuming df is your DataFrame and 'HttpHost' is the column of interest
df['IPAddresses'] = df['HttpHost'].apply(lambda x: re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', str(x)).group() if re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', str(x)) else None)

# Drop rows with missing or invalid IP addresses
df = df.dropna(subset=['IPAddresses'])

# Vectorize IP addresses using TF-IDF
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['IPAddresses'])

# Perform k-means clustering
num_clusters = 10
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
df['Cluster'] = kmeans.fit_predict(X)

# Plotting cluster assignments
plt.scatter(X[:, 0], X[:, 1], c=df['Cluster'], cmap='viridis', s=20)
plt.title('K-Means Clustering of IP Addresses')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

# Display the distribution of IP addresses in each cluster
cluster_distribution = df.groupby('Cluster')['IPAddresses'].value_counts()
print("Cluster Distribution:")
print(cluster_distribution)

# Print each row with its cluster assignment
for index, row in df.iterrows():
    print(f"Row {index}: Cluster {row['Cluster']} - IP Address: {row['IPAddresses']}")
