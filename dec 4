import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.cluster import AgglomerativeClustering
import numpy as np

# Assuming extracted_df is your DataFrame with a column 'Value'
extracted_df['Value'] = extracted_df['Value'].astype('str')
unique_values = extracted_df['Value'].unique()

# Vectorize unique values using TF-IDF
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(unique_values)

# Check if any row has all zero values
non_zero_rows = np.array(np.sum(X, axis=1)).flatten() != 0
X_non_zero = X[non_zero_rows]

if X_non_zero.shape[0] == 0:
    # Handle the case where there are no non-zero vectors
    print("No non-zero vectors to cluster.")
else:
    # Calculate cosine similarity between vectors
    cosine_sim = cosine_similarity(X_non_zero, X_non_zero)

    # Apply hierarchical clustering
    clustering = AgglomerativeClustering(n_clusters=10, affinity='cosine', linkage='complete')
    clusters = clustering.fit_predict(cosine_sim)

    # Assign cluster labels to original DataFrame
    extracted_df.loc[non_zero_rows, 'Cluster'] = clusters

    # Display the result
    print(extracted_df[['ID', 'Value', 'Cluster']])
