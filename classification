import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Assuming df is your DataFrame with 'HttpHost' and 'Protocol' columns

# Feature Engineering (using HttpHost as the main independent variable)
X = df['HttpHost'].astype(str)

# Target variable
y = df['Protocol']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize the HTTP hosts using TF-IDF
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Create and train a classification model (Logistic Regression in this example)
classifier = LogisticRegression(random_state=42)
classifier.fit(X_train_tfidf, y_train)

# Make predictions on the test set
y_pred = classifier.predict(X_test_tfidf)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)





# Assuming you already have a trained model (classifier) and vectorizer from the previous code

# New HTTP host value(s) to predict
new_http_hosts = ["new_http_host_1.com", "new_http_host_2.com", "new_http_host_3.com"]

# Vectorize the new HTTP hosts using the same TF-IDF vectorizer
new_http_hosts_tfidf = vectorizer.transform(new_http_hosts)

# Make predictions using the trained classifier
new_predictions = classifier.predict(new_http_hosts_tfidf)

# Display the predictions
for http_host, prediction in zip(new_http_hosts, new_predictions):
    print(f"HTTP Host: {http_host} - Predicted Protocol: {prediction}")






import joblib

# Save the trained model and vectorizer to files
model_filename = 'protocol_classifier_model.joblib'
vectorizer_filename = 'protocol_tfidf_vectorizer.joblib'

# Save the model
joblib.dump(classifier, model_filename)

# Save the TF-IDF vectorizer
joblib.dump(vectorizer, vectorizer_filename)

print(f"Trained model and vectorizer saved to {model_filename} and {vectorizer_filename}")





# Load the trained model and vectorizer from files
loaded_classifier = joblib.load('protocol_classifier_model.joblib')
loaded_vectorizer = joblib.load('protocol_tfidf_vectorizer.joblib')

# Now, you can use loaded_classifier and loaded_vectorizer for predictions on new data

